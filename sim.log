sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 69.0033
Branch Predictor Power Consumption: 4.52313  (6.75%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.624%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (3.29%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.44%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.57247  (5.33%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.43%)
Total Clock Power: 25.7602  (38.4%)
Int ALU Power: 4.66013  (6.96%)
FP ALU Power: 14.281  (21.3%)
Instruction Cache Power Consumption: 0.927073  (1.38%)
 decode_power (W): 0.325528
 wordline_power (W): 0.036291
 bitline_power (W): 0.339044
 senseamp_power (W): 0.096
 tagarray_power (W): 0.130211
Itlb_power (W): 0.271366 (0.405%)
Data Cache Power Consumption: 5.19894  (7.76%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.870793
Dtlb_power (W): 0.925654 (1.38%)
Level 2 Cache Power Consumption: 1.00033 (1.49%)
 decode_power (W): 0.090611
 wordline_power (W): 0.0225599
 bitline_power (W): 0.573457
 senseamp_power (W): 0.096
 tagarray_power (W): 0.217698
sim: command line: ../../sim-wattch-1.02d/sim-outorder -config my_config -redir:sim sim.log -redir:prog prog.out loopunroll 

sim: simulation started @ Thu Feb  1 23:28:03 2024, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          sim.log # redirect simulator output to file (non-interactive only)
# -redir:prog        prog.out # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:128:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:128:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn                 176859 # total number of instructions committed
sim_num_refs                  58369 # total number of loads and stores committed
sim_num_loads                 39702 # total number of loads committed
sim_num_stores           18667.0000 # total number of stores committed
sim_num_branches              35999 # total number of branches committed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate           176859.0000 # simulation speed (in insts/sec)
sim_total_insn               184907 # total number of instructions executed
sim_total_refs                60569 # total number of loads and stores executed
sim_total_loads               41367 # total number of loads executed
sim_total_stores         19202.0000 # total number of stores executed
sim_total_branches            37385 # total number of branches executed
sim_cycle                    280562 # total simulation time in cycles
sim_IPC                      0.6304 # instructions per cycle
sim_CPI                      1.5864 # cycles per instruction
sim_exec_BW                  0.6591 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.9129 # instruction per branch
IFQ_count                    229783 # cumulative IFQ occupancy
IFQ_fcount                    44032 # cumulative IFQ full count
ifq_occupancy                0.8190 # avg IFQ occupancy (insn's)
ifq_rate                     0.6591 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2427 # avg IFQ occupant latency (cycle's)
ifq_full                     0.1569 # fraction of time (cycle's) IFQ was full
RUU_count                    980475 # cumulative RUU occupancy
RUU_fcount                    19199 # cumulative RUU full count
ruu_occupancy                3.4947 # avg RUU occupancy (insn's)
ruu_rate                     0.6591 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.3025 # avg RUU occupant latency (cycle's)
ruu_full                     0.0684 # fraction of time (cycle's) RUU was full
LSQ_count                    306114 # cumulative LSQ occupancy
LSQ_fcount                     1874 # cumulative LSQ full count
lsq_occupancy                1.0911 # avg LSQ occupancy (insn's)
lsq_rate                     0.6591 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.6555 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0067 # fraction of time (cycle's) LSQ was full
sim_slip                    1479570 # total number of slip cycles
avg_sim_slip                 8.3658 # the average slip between issue and retirement
bpred_bimod.lookups           37738 # total number of bpred lookups
bpred_bimod.updates           35999 # total number of updates
bpred_bimod.addr_hits         34516 # total number of address-predicted hits
bpred_bimod.dir_hits          34841 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses             1158 # total number of misses
bpred_bimod.jr_hits            1927 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen            1980 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP          207 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP          249 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9588 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9678 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9732 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8313 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes         1826 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops         1735 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP         1731 # total number of RAS predictions used
bpred_bimod.ras_hits.PP         1720 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9936 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                 219646 # total number of accesses
il1.hits                     186657 # total number of hits
il1.misses                    32989 # total number of misses
il1.replacements              32861 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.1502 # miss rate (i.e., misses/ref)
il1.repl_rate                0.1496 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                  56335 # total number of accesses
dl1.hits                      55733 # total number of hits
dl1.misses                      602 # total number of misses
dl1.replacements                109 # total number of replacements
dl1.writebacks                  102 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0107 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0019 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0018 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                  33693 # total number of accesses
ul2.hits                      32667 # total number of hits
ul2.misses                     1026 # total number of misses
ul2.replacements                514 # total number of replacements
ul2.writebacks                   38 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0305 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0153 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0011 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses                219646 # total number of accesses
itlb.hits                    219626 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                 59549 # total number of accesses
dtlb.hits                     59538 # total number of hits
dtlb.misses                      11 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0002 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power            117265.2329 # total power usage of rename unit
bpred_power            1269017.3879 # total power usage of bpred unit
window_power            618448.2647 # total power usage of instruction window
lsq_power               270231.7036 # total power usage of load/store queue
regfile_power          1002299.9188 # total power usage of arch. regfile
icache_power            336236.4877 # total power usage of icache
dcache_power           1718327.3495 # total power usage of dcache
dcache2_power           280653.4347 # total power usage of dcache2
alu_power              5314174.0531 # total power usage of alu
falu_power             4006718.5321 # total power usage of falu
resultbus_power         644603.2275 # total power usage of resultbus
clock_power            7227325.9544 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             1.1984 # avg power usage of icache
avg_dcache_power             6.1246 # avg power usage of dcache
avg_dcache2_power            1.0003 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             25.7602 # avg power usage of clock
fetch_stage_power      1605253.8757 # total power usage of fetch stage
dispatch_stage_power    117265.2329 # total power usage of dispatch stage
issue_stage_power      8846438.0332 # total power usage of issue stage
avg_fetch_power              5.7216 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             31.5311 # average power of issue unit per cycle
total_power            18798583.0150 # total power per cycle
avg_total_power_cycle       67.0033 # average total power per cycle
avg_total_power_cycle_nofp_nod2      51.7219 # average total power per cycle
avg_total_power_insn       101.6651 # average total power per insn
avg_total_power_insn_nofp_nod2      78.4784 # average total power per insn
rename_power_cc1         27402.2353 # total power usage of rename unit_cc1
bpred_power_cc1         144803.3684 # total power usage of bpred unit_cc1
window_power_cc1        337449.7558 # total power usage of instruction window_cc1
lsq_power_cc1            23300.4808 # total power usage of lsq_cc1
regfile_power_cc1       386973.7139 # total power usage of arch. regfile_cc1
icache_power_cc1        109158.6325 # total power usage of icache_cc1
dcache_power_cc1        278129.9021 # total power usage of dcache_cc1
dcache2_power_cc1        33598.9463 # total power usage of dcache2_cc1
alu_power_cc1           440624.6549 # total power usage of alu_cc1
resultbus_power_cc1     210665.1237 # total power usage of resultbus_cc1
clock_power_cc1        1147068.6876 # total power usage of clock_cc1
avg_rename_power_cc1         0.0977 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.5161 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.2028 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0830 # avg power usage of lsq_cc1
avg_regfile_power_cc1        1.3793 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.3891 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.9913 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1198 # avg power usage of dcache2_cc1
avg_alu_power_cc1            1.5705 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.7509 # avg power usage of resultbus_cc1
avg_clock_power_cc1          4.0885 # avg power usage of clock_cc1
fetch_stage_power_cc1   253962.0009 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1   27402.2353 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  1323768.8635 # total power usage of issue stage_cc1
avg_fetch_power_cc1          0.9052 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0977 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.7183 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  3139175.5012 # total power per cycle_cc1
avg_total_power_cycle_cc1      11.1889 # average total power per cycle_cc1
avg_total_power_insn_cc1      16.9771 # average total power per insn_cc1
rename_power_cc2         19269.0449 # total power usage of rename unit_cc2
bpred_power_cc2          81414.0136 # total power usage of bpred unit_cc2
window_power_cc2        149208.8768 # total power usage of instruction window_cc2
lsq_power_cc2            14796.8000 # total power usage of lsq_cc2
regfile_power_cc2        66888.0683 # total power usage of arch. regfile_cc2
icache_power_cc2        109158.6325 # total power usage of icache_cc2
dcache_power_cc2        172514.4019 # total power usage of dcache_cc2
dcache2_power_cc2        16851.9902 # total power usage of dcache2_cc2
alu_power_cc2           203460.1307 # total power usage of alu_cc2
resultbus_power_cc2      97421.1943 # total power usage of resultbus_cc2
clock_power_cc2         535091.3233 # total power usage of clock_cc2
avg_rename_power_cc2         0.0687 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2902 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.5318 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0527 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.2384 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.3891 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.6149 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0601 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7252 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.3472 # avg power usage of resultbus_cc2
avg_clock_power_cc2          1.9072 # avg power usage of clock_cc2
fetch_stage_power_cc2   190572.6461 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2   19269.0449 # total power usage of dispatch stage_cc2
issue_stage_power_cc2   654253.3938 # total power usage of issue stage_cc2
avg_fetch_power_cc2          0.6793 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0687 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.3319 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  1466074.4764 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.2255 # average total power per cycle_cc2
avg_total_power_insn_cc2       7.9287 # average total power per insn_cc2
rename_power_cc3         28255.3446 # total power usage of rename unit_cc3
bpred_power_cc3         193950.7552 # total power usage of bpred unit_cc3
window_power_cc3        174688.3587 # total power usage of instruction window_cc3
lsq_power_cc3            39395.8215 # total power usage of lsq_cc3
regfile_power_cc3       124150.1519 # total power usage of arch. regfile_cc3
icache_power_cc3        131866.4180 # total power usage of icache_cc3
dcache_power_cc3        316558.0325 # total power usage of dcache_cc3
dcache2_power_cc3        41557.4391 # total power usage of dcache2_cc3
alu_power_cc3           690815.0705 # total power usage of alu_cc3
resultbus_power_cc3     138772.6009 # total power usage of resultbus_cc3
clock_power_cc3        1137910.9742 # total power usage of clock_cc3
avg_rename_power_cc3         0.1007 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6913 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.6226 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1404 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.4425 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         0.4700 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.1283 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.1481 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.4623 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.4946 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.0558 # avg power usage of clock_cc3
fetch_stage_power_cc3   325817.1732 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3   28255.3446 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  1401787.3232 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.1613 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1007 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.9964 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  3017920.9673 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.7567 # average total power per cycle_cc3
avg_total_power_insn_cc3      16.3213 # average total power per insn_cc3
total_rename_access          184408 # total number accesses of rename unit
total_bpred_access            35999 # total number accesses of bpred unit
total_window_access          685485 # total number accesses of instruction window
total_lsq_access              63052 # total number accesses of load/store queue
total_regfile_access         250985 # total number accesses of arch. regfile
total_icache_access          220203 # total number accesses of icache
total_dcache_access           56335 # total number accesses of dcache
total_dcache2_access          33693 # total number accesses of dcache2
total_alu_access             174639 # total number accesses of alu
total_resultbus_access       185758 # total number accesses of resultbus
avg_rename_access            0.6573 # avg number accesses of rename unit
avg_bpred_access             0.1283 # avg number accesses of bpred unit
avg_window_access            2.4433 # avg number accesses of instruction window
avg_lsq_access               0.2247 # avg number accesses of lsq
avg_regfile_access           0.8946 # avg number accesses of arch. regfile
avg_icache_access            0.7849 # avg number accesses of icache
avg_dcache_access            0.2008 # avg number accesses of dcache
avg_dcache2_access           0.1201 # avg number accesses of dcache2
avg_alu_access               0.6225 # avg number accesses of alu
avg_resultbus_access         0.6621 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                15 # max number accesses of instruction window
max_lsq_access                    6 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                2 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              5 # max number accesses of resultbus
max_cycle_power_cc1         33.3602 # maximum cycle power usage of cc1
max_cycle_power_cc2         24.3249 # maximum cycle power usage of cc2
max_cycle_power_cc3         28.3716 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 103888 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  14512 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   37 # total number of pages allocated
mem.page_mem                   148k # total size of memory pages allocated
mem.ptab_misses                  45 # total first level page table misses
mem.ptab_accesses           1941076 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

